// <auto-generated />
using System;
using DevFlow.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevFlow.Infrastructure.Migrations
{
    [DbContext(typeof(DevFlowDbContext))]
    [Migration("20250604160829_AddPluginDependencies")]
    partial class AddPluginDependencies
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("DevFlow.Domain.Plugins.Entities.Plugin", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Capabilities")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Dependencies")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EntryPoint")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("ExecutionCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastExecutedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastValidatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PluginPath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Plugins_Status");

                    b.ToTable("Plugins", null, t =>
                        {
                            t.Property("Version")
                                .HasColumnName("Plugin_Version");
                        });
                });

            modelBuilder.Entity("DevFlow.Domain.Workflows.Entities.Workflow", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Workflows_CreatedAt");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Workflows_Status");

                    b.ToTable("Workflows", (string)null);
                });

            modelBuilder.Entity("DevFlow.Domain.Workflows.Entities.WorkflowStep", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Output")
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PluginId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WorkflowId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_WorkflowSteps_Status");

                    b.HasIndex("WorkflowId", "Order")
                        .HasDatabaseName("IX_WorkflowSteps_WorkflowId_Order");

                    b.ToTable("WorkflowSteps", (string)null);
                });

            modelBuilder.Entity("DevFlow.Domain.Plugins.Entities.Plugin", b =>
                {
                    b.OwnsOne("DevFlow.Domain.Plugins.ValueObjects.PluginMetadata", "Metadata", b1 =>
                        {
                            b1.Property<Guid>("PluginId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("TEXT")
                                .HasColumnName("Description");

                            b1.Property<string>("Language")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("TEXT")
                                .HasColumnName("Language");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("Name");

                            b1.Property<string>("Version")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("TEXT")
                                .HasColumnName("Version");

                            b1.HasKey("PluginId");

                            b1.HasIndex("Name", "Version")
                                .IsUnique()
                                .HasDatabaseName("IX_Plugins_Name_Version");

                            b1.ToTable("Plugins");

                            b1.WithOwner()
                                .HasForeignKey("PluginId");
                        });

                    b.Navigation("Metadata")
                        .IsRequired();
                });

            modelBuilder.Entity("DevFlow.Domain.Workflows.Entities.Workflow", b =>
                {
                    b.OwnsOne("DevFlow.Domain.Workflows.ValueObjects.WorkflowDescription", "Description", b1 =>
                        {
                            b1.Property<Guid>("WorkflowId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("TEXT")
                                .HasColumnName("Description");

                            b1.HasKey("WorkflowId");

                            b1.ToTable("Workflows");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowId");
                        });

                    b.OwnsOne("DevFlow.Domain.Workflows.ValueObjects.WorkflowName", "Name", b1 =>
                        {
                            b1.Property<Guid>("WorkflowId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("Name");

                            b1.HasKey("WorkflowId");

                            b1.ToTable("Workflows");

                            b1.WithOwner()
                                .HasForeignKey("WorkflowId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("DevFlow.Domain.Workflows.Entities.WorkflowStep", b =>
                {
                    b.HasOne("DevFlow.Domain.Workflows.Entities.Workflow", null)
                        .WithMany("Steps")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevFlow.Domain.Workflows.Entities.Workflow", b =>
                {
                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
